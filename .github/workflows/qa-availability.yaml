name: qa-availability-workflow

on:
  pull_request:
    types: [opened, reopened]
    branches:
      - 'test2'

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  issues: write
  packages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write
  id-token: write

jobs:
  Check_Availability:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      
      - name: display branch
        run: |-
         git branch
         echo print : ${{ github.head_ref }} 

      - name: Install gh utility
        run: |-
         type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
         curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
         && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
         && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
         && sudo apt update \
         && sudo apt install gh -y
         echo "check1"
         gh --version

   
      - name: Check availability of QA
        id: check-availability
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |-          
          QA_ENV=( 'proof-v10-qa-1' 'proof-v10-qa-2' 'proof-v10-qa-3' )
          for ((i=0; i<3; i++)); do
            git fetch origin ${QA_ENV[$i]} && git checkout ${QA_ENV[$i]}
            ls -al
            pwd
            temp=$(find . -name "checkpoint.txt")
            echo $temp
            pr_list=$(gh pr list --base ${QA_ENV[$i]})
            if [ -z "$temp" ] && [ -z "$pr_list" ]; then
              test=${QA_ENV[$i]}
              echo "isnide condition"
              break
            fi
          done

          echo $temp
          echo $test
          echo "test=$test" >> "$GITHUB_ENV"

      - name: Commit Files
        if: ${{ env.test != '' }}       
        run: |-
          git config --local user.email ""noreplay@github.com""
          git config --local user.name "githubCI"
          git fetch origin test2 && git checkout test2
          git fetch origin ${{ env.test }} && git checkout ${{ env.test }}
          git merge -X ours origin/test2
          git log --oneline test2 | head -n 1 | awk '{print $1}' >> checkpoint.txt
          git add ./checkpoint.txt
          git commit -m "Add commitfile"              

      - name: Push Changes
        if: ${{ env.test != '' }} 
        uses: ad-m/github-push-action@master
        with:
           force: true
           github_token: ${{ secrets.GITHUB_TOKEN }}
           branch: ${{ env.test }}

      - name: 'Create PR'
        if: ${{ env.test != '' }} 
        id: create-pr
        env: 
          GH_TOKEN: ${{ secrets.GH_TOKEN }}      
        run: |-
          echo $test
          echo "${{ env.test }}"
          gh pr list
          git branch
          gh pr create --base "${{ env.test }}" --head ${{ github.event.pull_request.head.ref }} -t "Auto create QA pr for test" -b "testiiing"

      - name: 'Get Branch Links'
        id: get-link
        env: 
          GH_TOKEN: ${{ secrets.GH_TOKEN }}      
        run: |-
         echo print : ${{ github.head_ref }}
         featlink=https://github.com/proofio/catalyst-backend/tree/${{ github.head_ref }}
         echo "featlink: $featlink"
         echo "featlink=$featlink" >> "$GITHUB_ENV"
         pr_number=`gh pr list --base "${{ env.test }}" --head "${{ github.event.pull_request.head.ref }}" | awk '{print $1}'`
         prlink=https://github.com/proofio/catalyst-backend/pull/${pr_number}
         echo "pr link : $prlink "
         echo "prlink=$prlink" >> "$GITHUB_ENV"

         echo "${{ env.test }}"

      - name: 'Slack Notification'
        if: ${{ env.test == '' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: '#FF0000'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: 'No QA environment available for now, PR with ${{ env.featlink }} to available QA environment will be auto created when any qa environment becomes available'
          SLACK_TITLE: Post Title
          SLACK_USERNAME: Proof-QA-Alert
          SLACK_FOOTER: 'Proof'
          SLACK_ICON: https://avatars.githubusercontent.com/u/125573010?s=48&v=4

      - name: 'Slack Notification'
        if: ${{ env.test != '' }} 
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: 'You can merge this PR ${{ env.prlink }} , it will deploy this ${{ env.featlink }} to ${{ env.test }}'
          SLACK_TITLE: Post Title
          SLACK_USERNAME: Proof-QA-Alert
          SLACK_FOOTER: 'Proof'
          SLACK_ICON: https://avatars.githubusercontent.com/u/125573010?s=48&v=4
